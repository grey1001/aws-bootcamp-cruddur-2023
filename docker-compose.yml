x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"
    tag: "{{.Name}}"


networks:
  default:
    name: cruddur
    driver: bridge

services:
  backend:
    container_name: backend
    build:
      context: ./backend-flask
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      FLASK_APP: app.py
      FLASK_ENV: development  # Ensure Flask is in debug mode
      BACKEND_URL: "http://backend"  # Use service name instead of localhost
      FRONTEND_URL: "*" # Use service name instead of localhost
      OTEL_SERVICE_NAME: "Cruddur"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otelcol:4317"
      HONEYCOMB_API_KEY: ""  # Ensure this is set
    volumes:
      - ./backend-flask:/app
    logging: *logging

  frontend:
    container_name: frontend
    build:
      context: ./frontend-react-js
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      REACT_APP_BACKEND_URL: http://backend:5000  # Use service name instead of localhost
    volumes:
      - ./frontend-react-js:/app
    logging: *logging

  dynamodb-local:
    container_name: dynamodb-local
    image: amazon/dynamodb-local:latest
    user: root
    ports:
      - "8000:8000"
    volumes:
      - dynamodb-data:/home/dynamodblocal
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb"]
    working_dir: /home/dynamodblocal
    logging: *logging

  db:
    container_name: db
    image: postgres:13-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cruddr
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    logging: *logging

  otelcol:
    container_name: otel-col
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317"  # OTLP gRPC receiver
      - "4318"  # OTLP HTTP receiver
    depends_on:
      - jaeger
    logging: *logging

  jaeger:
    image: jaegertracing/all-in-one:1.22
    container_name: jaeger
    command:
      - "--memory.max-traces=5000"
      - "--query.base-path=/jaeger/ui"
    deploy:
      resources:
        limits:
          memory: 400M
    restart: unless-stopped
    ports:
      - "16686"  # Jaeger UI
      - "4317"  # OTLP gRPC
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - COLLECTOR_OTLP_GRPC_HOST_PORT=jaeger:4317
    logging: *logging

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
      - --enable-feature=otlp-write-receiver
    volumes:
      - ./prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "9090:9090"
    logging: *logging

volumes:
  db-data:
    driver: local
  dynamodb-data:
    driver: local

